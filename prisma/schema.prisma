// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("ENGINEER") // ENGINEER, MANAGER, OBSERVER
  accounts      Account[]
  sessions      Session[]
  defects       Defect[]  // Дефекты, которые он создал
  assignedDefects Defect[] @relation("AssignedDefects") // Дефекты, которые на него назначены

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sites     ConstructionSite[]

  @@map("projects")
}

model ConstructionSite {
  id        String   @id @default(cuid())
  name      String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  defects   Defect[]

  @@map("construction_sites")
}

model Defect {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("NEW") // NEW, IN_PROGRESS, UNDER_REVIEW, CLOSED, CANCELLED
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deadline    DateTime?

  siteId      String
  site        ConstructionSite @relation(fields: [siteId], references: [id], onDelete: Cascade)

  creatorId   String
  creator     User @relation("CreatedDefects", fields: [creatorId], references: [id], onDelete: Cascade)

  assigneeId  String?
  assignee    User? @relation("AssignedDefects", fields: [assigneeId], references: [id], onDelete: SetNull)

  comments    Comment[]
  attachments Attachment[]

  @@map("defects")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  defectId  String
  defect    Defect   @relation(fields: [defectId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String   // Путь к файлу в S3 или публичный URL
  type      String   // MIME-type, например, image/jpeg
  createdAt DateTime @default(now())
  defectId  String
  defect    Defect   @relation(fields: [defectId], references: [id], onDelete: Cascade)

  @@map("attachments")
}